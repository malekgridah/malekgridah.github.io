{"version":3,"sources":["webpack:///./src/app/pages/register/register.component.html","webpack:///./src/app/pages/register/register.component.ts","webpack:///./src/app/pages/register/register.module.ts"],"names":[],"mappings":";;;;;;;;;AAAA,0pG;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA0C;AACD;AAC0B;AACkB;AACpC;AAOjD;IAGE,2BAAmB,WAAuB,EAAS,EAAe,EAAS,MAAa;QAArE,gBAAW,GAAX,WAAW,CAAY;QAAS,OAAE,GAAF,EAAE,CAAa;QAAS,WAAM,GAAN,MAAM,CAAO;QACtF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,MAAM,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClF,OAAO,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,0EAAc,CAAC,CAAC,CAAC;YAC1E,UAAU,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACrC,iBAAiB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC7C,EAAC,EAAC,SAAS,EAAE,qFAAiB,CAAC,UAAU,EAAE,iBAAiB,CAAC,EAAC,CAAC,CAAC;IACnE,CAAC;IAEM,oCAAQ,GAAf,UAAgB,MAAa;QAC3B,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SAClC;IACH,CAAC;IAED,2CAAe,GAAf;QACE,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,KAAK,CAAC;IACvC,CAAC;IArBU,iBAAiB;QAJ7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,kHAAwC;SACzC,CAAC;yCAI+B,yDAAW,EAAa,0DAAW,EAAgB,sDAAM;OAH7E,iBAAiB,CAsB7B;IAAD,wBAAC;CAAA;AAtB6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXW;AACM;AACA;AACmB;AACR;AACD;AAElD,IAAM,MAAM,GAAG;IACpB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,qEAAiB,EAAE,SAAS,EAAE,MAAM,EAAE;CAC9D,CAAC;AAcF;IAAA;IAA8B,CAAC;IAAlB,cAAc;QAZ1B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC7B,0DAAW;gBACX,kEAAmB;gBACnB,kEAAY;aACb;YACD,YAAY,EAAE;gBACZ,qEAAiB;aAClB;SACF,CAAC;OACW,cAAc,CAAI;IAAD,qBAAC;CAAA;AAAJ","file":"pages-register-register-module.js","sourcesContent":["module.exports = \"<mat-sidenav-container class=\\\"h-100\\\">\\r\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n       <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form.value)\\\" fxFlex=\\\"90\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\" class=\\\"mat-elevation-z6\\\">\\r\\n            <app-content-header \\r\\n                [icon]=\\\"'person_add'\\\" \\r\\n                [title]=\\\"'Register'\\\" \\r\\n                [hideBreadcrumb]=\\\"true\\\"\\r\\n                [hasBgImage]=\\\"true\\\" \\r\\n                [class]=\\\"'py-4'\\\"></app-content-header>            \\r\\n            <div class=\\\"p-4\\\">\\r\\n                <a mat-button routerLink=\\\"/login\\\" color=\\\"accent\\\" class=\\\"w-100\\\">Already have an account? Sign in!</a>\\r\\n                <mat-form-field class=\\\"w-100\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mat-icon-sm mb-2 mr-2 secondary-text-color\\\">person</mat-icon>\\r\\n                    <input matInput placeholder=\\\"Full Name\\\" formControlName=\\\"name\\\">\\r\\n                    <mat-error *ngIf=\\\"form.controls.name.errors?.required\\\">Full Name is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"form.controls.name.hasError('minlength')\\\">Full Name isn't long enough, minimum of 3 characters</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mat-icon-sm mb-2 mr-2 secondary-text-color\\\">mail</mat-icon>\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                    <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mat-icon-sm mb-2 mr-2 secondary-text-color\\\">lock</mat-icon>\\r\\n                    <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\">\\r\\n                    <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                </mat-form-field> \\r\\n                <mat-form-field class=\\\"w-100\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mat-icon-sm mb-2 mr-2 secondary-text-color\\\">lock</mat-icon>\\r\\n                    <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\">\\r\\n                    <mat-error *ngIf=\\\"form.controls.confirmPassword.errors?.required\\\">Confirm Password is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"form.controls.confirmPassword.hasError('mismatchedPasswords')\\\">Passwords do not match</mat-error>\\r\\n                </mat-form-field>\\r\\n                <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z6 w-100 mt-3\\\" type=\\\"submit\\\">SIGN UP</button>\\r\\n            </div>\\r\\n        </form>\\r\\n  </div>\\r\\n</mat-sidenav-container>\"","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public fb: FormBuilder, public router:Router){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'name': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.required],\r\n      'confirmPassword': ['', Validators.required]\r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n  }\r\n\r\n  public onSubmit(values:Object):void {\r\n    if (this.form.valid) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    this.settings.loadingSpinner = false; \r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class RegisterModule { }"],"sourceRoot":""}